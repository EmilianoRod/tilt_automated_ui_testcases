package listeners;

import io.qameta.allure.Attachment;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.logging.LogEntries;
import org.openqa.selenium.logging.LogEntry;
import org.openqa.selenium.logging.LogType;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;

import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;


public class TestListener implements ITestListener {


    @Override public void onTestFailure(ITestResult result) {
        WebDriver driver = extractDriver(result);
        if (driver == null) return;

        attachUrl(driver);
        attachScreenshot(driver);
        attachPageSource(driver);
        attachBrowserConsole(driver);
    }

    @Override public void onTestSkipped(ITestResult result) {
        // Skipped tests can also dump debug info if desired
        onTestFailure(result);
    }

    // -------- Helpers --------

    private WebDriver extractDriver(ITestResult result) {
        try {
            Object instance = result.getInstance();
            if (instance == null) return null;
            // Expect a protected/public 'driver' field in BaseTest subclasses
            Field f = instance.getClass().getSuperclass().getDeclaredField("driver");
            f.setAccessible(true);
            Object d = f.get(instance);
            return (d instanceof WebDriver) ? (WebDriver) d : null;
        } catch (Exception ignore) {
            return null;
        }
    }

    @Attachment(value = "Current URL", type = "text/plain")
    private byte[] attachUrl(WebDriver driver) {
        String url = "(no url)";
        try { url = driver.getCurrentUrl(); } catch (Exception ignored) {}
        return url.getBytes(StandardCharsets.UTF_8);
    }

    @Attachment(value = "Screenshot", type = "image/png")
    private byte[] attachScreenshot(WebDriver driver) {
        try { return ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES); }
        catch (Exception e) { return new byte[0]; }
    }

    @Attachment(value = "Page Source", type = "text/html")
    private byte[] attachPageSource(WebDriver driver) {
        try { return driver.getPageSource().getBytes(StandardCharsets.UTF_8); }
        catch (Exception e) { return "<no page source>".getBytes(StandardCharsets.UTF_8); }
    }

    @Attachment(value = "Browser Console", type = "text/plain")
    private byte[] attachBrowserConsole(WebDriver driver) {
        try {
            LogEntries logs = driver.manage().logs().get(LogType.BROWSER);
            String all = logs.getAll().stream()
                    .map(this::fmt)
                    .collect(Collectors.joining(System.lineSeparator()));
            return all.getBytes(StandardCharsets.UTF_8);
        } catch (Exception e) {
            return "Browser logs not available".getBytes(StandardCharsets.UTF_8);
        }
    }

    private String fmt(LogEntry e) {
        return String.format("[%s] %s", e.getLevel(), e.getMessage());
    }


    private void writeAllureEnvironment() {
        try {
            Properties p = new Properties();
            p.setProperty("env", System.getProperty("env", "dev"));
            p.setProperty("baseUrl", System.getProperty("baseUrl", "https://tilt-dashboard-dev.tilt365.com"));
            p.setProperty("retry", System.getProperty("retry", "1"));
            p.setProperty("java.version", System.getProperty("java.version", ""));
            p.setProperty("os.name", System.getProperty("os.name", ""));
            p.setProperty("os.arch", System.getProperty("os.arch", ""));
            p.setProperty("user", System.getProperty("user.name", ""));

            Path resultsDir = Path.of(System.getProperty("user.dir"), "allure-results");
            Files.createDirectories(resultsDir);
            try (OutputStream out = Files.newOutputStream(resultsDir.resolve("environment.properties"))) {
                p.store(out, "Generated by TestListener");
            }
        } catch (Exception ignored) {
            // no-op: env file is optional
        }
    }

    // No-ops to keep interface minimal
    @Override public void onTestStart(ITestResult r) {}
    @Override public void onTestSuccess(ITestResult r) {}
    @Override public void onTestFailedButWithinSuccessPercentage(ITestResult r) {}
    @Override
    public void onStart(ITestContext context) {
        writeAllureEnvironment();
    }    @Override public void onFinish(ITestContext c) {}

}
